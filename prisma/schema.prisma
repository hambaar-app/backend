generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RolesEnum {
  sender
  transporter
  admin
  support

  @@map("roles_enum")
}

enum GendersEnum {
  male
  female
  others

  @@map("genders_enum")
}

enum LicenseTypeEnum {
  grade_one
  grade_two
  grade_three
  motorcycle

  @@map("license_type_enum")
}

enum VerificationStatusEnum {
  pending
  verified
  rejected
  suspended

  @@map("verification_status_enum")
}

enum VehicleTypeEnum {
  car
  motorcycle
  bicycle
  bus
  pickup_truck
  truck
  van

  @@map("vehicle_type_enum")
}

enum PackageStatusEnum {
  created
  searching_transporter
  matched
  picked_up
  in_transit
  delivered
  cancelled
  returned

  @@map("package_status_enum")
}

enum TripTypeEnum {
  intracity
  intercity

  @@map("trip_type_enum")
}

enum TripStatusEnum {
  scheduled
  closed
  delayed
  in_progress
  completed

  @@map("trip_status_enum")
}

enum RequestStatusEnum {
  pending
  accepted
  rejected
  canceled
  deleted

  @@map("request_status_enum")
}

enum MatchStatusEnum {
  confirmed
  completed
  cancelled_by_sender
  cancelled_by_transporter
  cancelled_by_system
  dispute

  @@map("match_status_enum")
}

enum PaymentStatusEnum {
  unpaid
  escrowed
  released

  @@map("payment_status_enum")
}

enum TransactionTypeEnum {
  deposit
  withdrawal
  escrow
  release
  refund
  commission

  @@map("transaction_type_enum")
}

model User {
  id              String       @id @default(uuid()) @db.Uuid
  firstName       String?      @map("first_name") @db.VarChar
  lastName        String?      @map("last_name") @db.VarChar
  gender          GendersEnum?
  phoneNumber     String       @unique @map("phone_number") @db.VarChar
  phoneVerifiedAt DateTime?    @map("phone_verified_at") @db.Timestamp
  email           String?      @unique @db.VarChar
  emailVerifiedAt DateTime?    @map("email_verified_at") @db.Timestamp
  birthDate       DateTime?    @map("birth_date") @db.Date
  role            RolesEnum    @default(sender)
  isActive        Boolean      @default(true) @map("is_active")

  // Relations
  transporter Transporter?
  packages    Package[]
  addresses   Address[]
  wallet      Wallet?

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz()

  @@map("users")
}

model Transporter {
  id                    String           @id @default(uuid()) @db.Uuid
  userId                String           @unique @map("user_id") @db.Uuid
  nationalId            String?          @unique @map("national_id") @db.VarChar
  nationalIdStatusId    String?          @map("national_id_status_id") @db.Uuid
  nationalIdDocumentKey String?          @map("national_id_document_key") @db.VarChar
  licenseNumber         String?          @unique @map("license_number") @db.VarChar
  licenseStatusId       String?          @map("license_status_id") @db.Uuid
  licenseDocumentKey    String?          @map("license_document_key") @db.VarChar
  licenseType           LicenseTypeEnum? @map("license_type")
  licenseExpiryDate     DateTime?        @map("license_expiry_date") @db.Date
  verificationStatusId  String?          @map("verification_status_id") @db.Uuid
  profilePictureKey     String?          @map("profile_picture_key") @db.VarChar
  bio                   String?          @db.Text

  // Relations
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicles           Vehicle[]
  trips              Trip[]
  achievements       Achievement[]
  nationalIdStatus   VerificationStatus? @relation("NationalIdStatus", fields: [nationalIdStatusId], references: [id], onDelete: SetNull)
  licenseStatus      VerificationStatus? @relation("DriverLicenseStatus", fields: [licenseStatusId], references: [id], onDelete: SetNull)
  verificationStatus VerificationStatus? @relation("TransporterVerification", fields: [verificationStatusId], references: [id], onDelete: SetNull)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz()

  @@map("transporters")
}

model VerificationStatus {
  id          String                 @id @default(uuid()) @db.Uuid
  status      VerificationStatusEnum @default(pending)
  description String?                @db.Text

  // Relations
  transporterNationalId    Transporter[] @relation("NationalIdStatus")
  transporterDriverLicense Transporter[] @relation("DriverLicenseStatus")
  transporterVerification  Transporter[] @relation("TransporterVerification")
  transporterVehicle       Vehicle[]     @relation("TransporterVehicleStatus")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz()

  @@map("verification_status")
}

model Vehicle {
  id                            String          @id @default(uuid()) @db.Uuid
  ownerId                       String          @map("owner_id") @db.Uuid
  vin                           String?         @unique @db.VarChar
  licensePlate                  String          @unique @map("license_plate") @db.VarChar
  barcode                       String?         @unique @map("barcode") @db.VarChar
  greenSheetNumber              String?         @unique @map("green_sheet_number") @db.VarChar
  vehicleType                   VehicleTypeEnum @map("vehicle_type")
  modelId                       String?         @map("model_id") @db.Uuid
  manufactureYear               Int?            @map("manufacture_year")
  color                         String?         @db.VarChar
  technicalInspectionDate       DateTime?       @map("technical_inspection_date") @db.Date
  technicalInspectionExpiryDate DateTime?       @map("technical_inspection_expiry_date") @db.Date
  insuranceNumber               String?         @unique @map("insurance_number") @db.VarChar
  insuranceExpiryDate           DateTime?       @map("insurance_expiry_date") @db.Date
  maxWeightCapacity             Float?          @map("max_weight_capacity") // in kg
  isActive                      Boolean         @default(true) @map("is_active")
  verificationDocuments         Json?           @map("verification_documents") @db.JsonB
  verificationStatusId          String?         @map("verification_status_id") @db.Uuid

  // Relations
  trips              Trip[]
  verificationStatus VerificationStatus? @relation("TransporterVehicleStatus", fields: [verificationStatusId], references: [id], onDelete: SetNull)
  owner              Transporter         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  model              VehicleModel?       @relation(fields: [modelId], references: [id], onDelete: SetNull)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz()

  @@map("vehicles")
}

model VehicleBrand {
  id          String  @id @default(uuid()) @db.Uuid
  name        String  @db.VarChar
  englishName String? @map("english_name") @db.VarChar

  // Relations
  models VehicleModel[]

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz()

  @@map("vehicle_brands")
}

model VehicleModel {
  id          String  @id @default(uuid()) @db.Uuid
  brandId     String  @map("brand_id") @db.Uuid
  name       String  @db.VarChar
  englishName String? @map("english_name") @db.VarChar

  // Relations
  vehicles Vehicle[]
  brand    VehicleBrand @relation(fields: [brandId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz()

  @@unique([brandId, name])
  @@map("vehicle_models")
}

model Province {
  id          String @id @default(uuid()) @db.Uuid
  name        String @unique @map("name")
  englishName String @unique @map("english_name")

  // Relations
  cities City[]

  @@map("provinces")
}

model City {
  id          String @id @default(uuid()) @db.Uuid
  provinceId  String @map("province_id") @db.Uuid
  name        String @unique @map("name")
  englishName String @unique @map("english_name")
  latitude    String
  longitude   String

  // Relations
  province         Province @relation(fields: [provinceId], references: [id], onDelete: Cascade)
  tripsOrigin      Trip[]   @relation("TripOrigin")
  tripsDestination Trip[]   @relation("TripDestination")

  @@map("cities")
}

model Address {
  id            String  @id @default(uuid()) @db.Uuid
  userId        String  @map("user_id") @db.Uuid
  title         String? @db.VarChar
  country       String  @default("Iran") @db.VarChar
  province      String? @db.VarChar
  city          String? @db.VarChar
  street        String? @db.VarChar
  plate         Int?    @map("plate")
  postalCode    String? @map("postal_code") @db.VarChar
  latitude      String
  longitude     String
  details       String? @db.Text
  isHighlighted Boolean @default(false) @map("is_highlighted")

  // Relations
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  packagesOrigin   Package[]          @relation("OriginAddress")
  packageRecipient PackageRecipient[]

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz()

  @@map("addresses")
}

model PackageRecipient {
  id            String  @id @default(uuid()) @db.Uuid
  fullName      String  @map("full_name") @db.VarChar
  phoneNumber   String  @map("phone_number") @db.VarChar
  addressId     String  @map("address_id") @db.Uuid
  isHighlighted Boolean @default(true) @map("is_highlighted")

  // Relations
  address  Address   @relation(fields: [addressId], references: [id], onDelete: Cascade)
  packages Package[]

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz()

  @@map("package_recipients")
}

model Package {
  id                    String            @id @default(uuid()) @db.Uuid
  senderId              String            @map("sender_id") @db.Uuid
  items                 Json?             @map("items_description") @db.JsonB
  originAddressId       String            @map("origin_address_id") @db.Uuid
  recipientId           String            @map("recipient_id") @db.Uuid
  weight                Int? // gr
  dimensions            String?           @db.VarChar // in cm and "LxWxH" format
  suggestedPrice        Int               @default(0) @map("suggested_price") // IRR
  breakdown             Json?             @db.JsonB
  finalPrice            Int               @default(0) @map("final_price") // IRR
  status                PackageStatusEnum @default(created) @map("status")
  packageValue          Int?              @map("package_value") // cost
  isFragile             Boolean?          @map("is_fragile")
  isPerishable          Boolean?          @map("is_perishable")
  description           String?           @db.Text
  pickupAtOrigin        Boolean?          @map("pickup_at_origin")
  deliveryAtDestination Boolean?          @map("delivery_at_destination")
  preferredPickupTime   Json?             @map("preferred_pickup_time") @db.JsonB
  preferredDeliveryTime Json?             @map("preferred_delivery_time") @db.JsonB
  picturesKey           Json?             @map("pictures_key") @db.JsonB

  // Relations
  deliveryRequests TripRequest[]    @relation("SenderRequests")
  matchedRequest   MatchedRequest?
  sender           User             @relation(fields: [senderId], references: [id], onDelete: Cascade)
  originAddress    Address          @relation("OriginAddress", fields: [originAddressId], references: [id], onDelete: Restrict)
  recipient        PackageRecipient @relation(fields: [recipientId], references: [id], onDelete: Restrict)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz()

  @@map("packages")
}

model Trip {
  id                        String         @id @default(uuid()) @db.Uuid
  transporterId             String         @map("transporter_id") @db.Uuid
  originId                  String         @map("origin_id") @db.Uuid
  destinationId             String         @map("destination_id") @db.Uuid
  tripType                  TripTypeEnum   @map("trip_type")
  vehicleId                 String         @map("vehicle_id") @db.Uuid
  normalDistanceKm          Float?         @map("normal_distance_km") @db.DoublePrecision
  normalDurationMin         Float?         @map("normal_duration_min") @db.DoublePrecision
  totalDeviationDistanceKm  Float?         @default(0) @map("total_deviation_distance_km") @db.DoublePrecision
  totalDeviationDurationMin Float?         @default(0) @map("total_deviation_duration_min") @db.DoublePrecision
  maxPackageWeightGr        Int?           @map("max_package_weight")
  restrictedItems           Json?          @map("restricted_items") @db.JsonB
  departureTime             Json           @map("departure_time") @db.JsonB
  status                    TripStatusEnum @default(scheduled) @map("status")
  description               String?        @db.Text
  isActive                  Boolean?       @default(true) @map("is_active")

  // Relations
  waypoints       TripWaypoint[]
  requests        TripRequest[]    @relation("TransporterRequests")
  matchedRequests MatchedRequest[]
  transporter     Transporter      @relation(fields: [transporterId], references: [id], onDelete: Cascade)
  origin          City             @relation("TripOrigin", fields: [originId], references: [id], onDelete: Restrict)
  destination     City             @relation("TripDestination", fields: [destinationId], references: [id], onDelete: Restrict)
  vehicle         Vehicle          @relation(fields: [vehicleId], references: [id], onDelete: Restrict)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz()

  @@map("trips")
}

model TripWaypoint {
  id        String  @id @default(uuid()) @db.Uuid
  tripId    String  @map("trip_id") @db.Uuid
  name      String? @db.VarChar
  latitude  String
  longitude String
  isVisible Boolean @default(false) @map("is_visible")

  // Relations
  trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz()

  @@map("trip_waypoints")
}

model TripRequest {
  id                   String             @id @default(uuid()) @db.Uuid
  packageId            String             @map("package_id") @db.Uuid
  tripId               String             @map("trip_id") @db.Uuid
  deviationCost        Int                @default(0) @map("deviation_cost")
  offeredPrice         Int                @default(0) @map("offered_price")
  deviationDistanceKm  Float              @default(0) @map("deviation_distance_km")
  deviationDurationMin Int                @default(0) @map("deviation_duration_min")
  senderNote           String?            @map("sender_note") @db.Text
  status               RequestStatusEnum? @default(pending)

  // Relations
  package        Package         @relation("SenderRequests", fields: [packageId], references: [id], onDelete: Cascade)
  trip           Trip            @relation("TransporterRequests", fields: [tripId], references: [id], onDelete: Cascade)
  matchedRequest MatchedRequest?

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz()

  @@unique([packageId, tripId, deletedAt])
  @@map("trip_requests")
}

model MatchedRequest {
  id               String            @id @default(uuid()) @db.Uuid
  requestId        String            @unique @map("request_id") @db.Uuid
  packageId        String            @unique @map("package_id") @db.Uuid
  tripId           String            @map("trip_id") @db.Uuid
  trackingCode     String?           @unique @map("tracking_code") @db.VarChar // 20-digits (Auto generated)
  deliveryCode     String?           @map("delivery_code") @db.VarChar // 5-digits (Auto generated)
  transporterNotes Json?             @map("transporter_note") @db.JsonB
  comment          String?           @map("comment") @db.Text
  senderRating     Int?              @map("sender_rating") // 1-5
  isCompleted      Boolean           @default(false) @map("is_completed")
  pickupTime       DateTime?         @map("pickup_time") @db.Timestamp
  deliveryTime     DateTime?         @map("delivery_time") @db.Timestamp
  matchStatus      MatchStatusEnum   @default(confirmed) @map("match_status")
  paymentStatus    PaymentStatusEnum @default(unpaid) @map("payment_status")

  // Relations
  request         TripRequest      @relation(fields: [requestId], references: [id], onDelete: Cascade)
  package         Package          @relation(fields: [packageId], references: [id], onDelete: Cascade)
  trip            Trip             @relation(fields: [tripId], references: [id], onDelete: Cascade)
  trackingUpdates TrackingUpdate[]
  transactions    Transaction[]

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz()

  @@unique([packageId, tripId])
  @@map("matched_requests")
}

model TrackingUpdate {
  id               String  @id @default(uuid()) @db.Uuid
  matchedRequestId String  @map("matched_request_id") @db.Uuid
  latitude         String? @map("latitude")
  longitude        String? @map("longitude")
  city             String? @map("city") @db.VarChar
  routeName        String? @map("route_name") @db.VarChar
  description      String? @db.Text

  // Relations
  matchedRequest MatchedRequest @relation(fields: [matchedRequestId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz()

  @@map("tracking_updates")
}

model Wallet {
  id             String  @id @default(uuid()) @db.Uuid
  userId         String  @unique @map("user_id") @db.Uuid
  balance        BigInt  @default(0)
  escrowedAmount Int     @default(0)
  totalEarned    BigInt  @default(0) @map("total_earned")
  totalSpent     BigInt  @default(0) @map("total_spent")
  isActive       Boolean @default(true) @map("is_active")

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz()

  @@map("wallets")
}

model Transaction {
  id                   String              @id @default(uuid()) @db.Uuid
  walletId             String              @map("wallet_id") @db.Uuid
  transactionType      TransactionTypeEnum @map("transaction_type")
  amount               BigInt
  balanceBefore        BigInt?             @map("balance_before")
  matchedRequestId     String?             @map("matched_request_id") @db.Uuid
  gatewayTransactionId String?             @map("gateway_transaction_id") @db.VarChar
  reason               String?             @db.VarChar

  // Relations
  wallet         Wallet          @relation(fields: [walletId], references: [id], onDelete: Cascade)
  matchedRequest MatchedRequest? @relation(fields: [matchedRequestId], references: [id], onDelete: SetNull)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz()

  @@map("transactions")
}

model Achievement {
  id        String @id @default(uuid()) @db.Uuid
  profileId String @map("profile_id") @db.Uuid
  name      String @db.VarChar // based on comments (Auto generated)

  // Relations
  profile Transporter @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz()

  @@map("achievements")
}
