volumes:
  postgres_data:
  postgres_log:
  redis_data:

networks:
  hambaar-network:
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: 'false'

services:
  postgres:
    image: postgres:17-alpine
    container_name: hambaar-postgres
    hostname: hambaar.postgres
    restart: unless-stopped
    stop_grace_period: 30s
    env_file:
      - ./.docker/.env
    environment:
      TZ: 'Asia/Tehran'
      PGTZ: 'Asia/Tehran'
      POSTGRES_DB: ${POSTGRES_DB:-hambaar-db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      PGDATA: '/data/postgres'
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    volumes:
      - postgres_data:/data/postgres:rw
      - postgres_log:/var/log/postgresql:rw
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-hambaar-db}',
        ]
      interval: 10s
      timeout: 20s
      retries: 5
      start_period: 10s
    networks:
      hambaar-network:

  redis:
    image: redis:8-alpine
    container_name: hambaar-redis
    hostname: hambaar.redis
    restart: unless-stopped
    stop_grace_period: 20s
    env_file:
      - ./.docker/.env
    environment:
      TZ: 'Asia/Tehran'
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis}
    command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD:-redis}"
    ports:
      - '${REDIS_PORT:-6379}:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 5s
    networks:
      hambaar-network:

  api-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    image: 1mimhe/hambaar-backend-dev:latest
    container_name: hambaar-api-dev
    hostname: hambaar.api.dev
    restart: unless-stopped
    stop_grace_period: 1m
    env_file:
      - ./.docker/.env
    ports:
      - '${PORT:-3000}:${PORT:-3000}'
    volumes:
      - ./:/usr/app
      - /usr/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:${PORT:-3000}/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: >
      sh -c "
        npm run start:dev
      "
    networks:
      - hambaar-network
    profiles:
      - backend

  frontend:
    image: 1mimhe/hambaar-frontend:latest
    container_name: hambaar-frontend
    restart: unless-stopped
    env_file:
      - /.docker/.env
    ports:
      - "${FRONTEND_PORT:-8080}:80"
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - hambaar-network
    profiles:
      - frontend
